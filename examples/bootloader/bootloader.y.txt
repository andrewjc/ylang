#output_format("binary")
#origin(0x7C00)
#align(512)
#boot_signature(0xAA55)

asm {
	// Set the origin for assembly code
	"org 0x7C00"
	"jmp start"  // Jump to the start label
}

data BootloaderInfo {
	let version string
	let loadAddress uint16
	let entryPoint uint16
}

let bootInfo = BootloaderInfo{version: "1.0", loadAddress: 0x7C00, entryPoint: 0x7C00}

function readSector(sectorNumber uint8, destinationAddress uint16) {
	asm {
		"mov ah, 0x02"             // BIOS read sector function
		"mov al, 1"                // Read 1 sector
		"mov ch, 0"                // Cylinder 0
		"mov cl, [sectorNumber]"   // Sector number
		"mov dh, 0"                // Head 0
		"mov dl, 0"                // Drive 0 (first floppy drive)
		"mov bx, [destinationAddress]"  // Set destination address
		"int 0x13"                 // BIOS interrupt to read sector
	}
}

function printString(message string) {
	for char in message {
		asm {
			"mov al, [char]"
			"mov ah, 0x0E"
			"int 0x10"
		}
	}
}

function main() -> {
	start:
	let welcomeMessage = "Welcome to the Bootloader!"
	printString(welcomeMessage)

	let sectors = 10
	let destinationAddress = 0x8000

	for sectorNumber in range(1, sectors + 1) {
		readSector(sectorNumber, destinationAddress)
		destinationAddress = destinationAddress + 512
	}

	if bootInfo.version == "1.0" {
		printString("Bootloader version 1.0 loaded successfully.")
	} else {
		printString("Unknown bootloader version.")
	}

	asm {
		"jmp 0x8000"  // Jump to the loaded kernel code
	}
}

onConstruct() -> {
	// Initialization code here
	printString("Initializing bootloader...")
}

onDestruct() -> {
	// Cleanup code here
	printString("Bootloader finished.")
}